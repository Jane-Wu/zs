<?php

/**
 * Implements hook_theme().
 */
use Drupal\node\Entity\Node;
use Drupal\taxonomy\TermStorage;
use Drupal\Core\Entity;
use Drupal\Core\StreamWrapper\PublicStream;
use Drupal\relation\Entity\Relation;
use Drupal\taxonomy\Entity\Term;
use Drupal\capital_news\LinkNewsNodeLink;
use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\feeds\Entity\Feed;

define('GOOGLE_SEARCH_TID', 178);
define('WECHAT_SEARCH_TID', 180);
define('WECHAT_OFFICIAL_TID', 179);

/**
 * Implements hook_cron().
 */
function capital_news_cron(){
  $hour = date('H');
  if(in_array($hour,  [6, 14 ,18])){
    _capital_news_get_wechat_news();
  } elseif ($hour == 7){
    _capital_news_get_google_news(false);
  } elseif ($hour == 17){
    _capital_news_get_google_news(true);
  } elseif ($hour == 0) {
    _capital_news_delete_obsolete_news();
  }
}
/**
 * Implements hook_mail().
 */
function capital_news_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );
  switch ($key) {
  case 'google_alerts_action':
    $message['from'] = \Drupal::config('system.site')->get('mail');
    $message['subject'] = t('Please update Google Alerts') . " " . date('Y-m-d');
    $message['body'][] = $params['message'];
    break;
  }
}
function capital_news_node_presave(EntityInterface $entity) {
  $type = $entity->getType();
  if($type == "news"){
    if(($entity->get('feeds_item'))){

      $news_link = $entity->get('field_news_link')->getValue();
      $news_link = $news_link[0]['uri'];
      preg_match('/url=(.+)&ct=ga/', $news_link, $matches);
      if(count($matches) == 2){
        $entity->field_news_link = ['uri' => $matches[1]];
        $entity->field_news_origin[] = _capital_news_getTidByLinkAndVocabulary($matches[1]);
      }
      $fid = $entity->get('feeds_item')->getValue();
      $fid = $fid[0]['target_id'];
      $feed = Feed::load($fid);
      $entity->field_related_nodes = $feed->get('field_related_nid')->getValue();
    }
  }
}

/**
 * Delete all the obsolete news nodes in batch
 */
function _capital_news_delete_obsolete_news() {
  $result = _capital_news_get_obsolete_news();
  $total = count($result);
  $queue = Drupal::queue('obsolete_news');
  \Drupal::logger('capital-news-deletion')->debug('delete news count: ' . $total);
  if (!empty($total)) {
    // Create queue item of 20 nodes.
    $count = 1;
    $nids = array();
    foreach ($result as $row) {
      $nids[] = $row->nid;
      if ($count % 20 === 0 || $count === $total) {
        $queue->createItem($nids);
        $nids = array();
      }
      ++$count;
    }
  }
}

/**
 * Get all the obsolete news nids from database
 */
function _capital_news_get_obsolete_news(){
  $connection = Database::getConnection();
  $query = $connection->select('node_field_data', 'nfd')
    ->fields('nfd', array('nid'));

  // Check the news those changed date is older than 10 days
  $bundle = 'news';
  $changed = strtotime('-10 days');
  $query->condition('nfd.type', $bundle);
  $query->condition('nfd.changed', $changed, '<');

  // Get the news those have no relations with other nodes
  $query->leftJoin('relation__endpoints', 'r',
    'nfd.nid=r.endpoints_entity_id');
  $db_or = db_or();
  $db_or->condition('r.entity_id', NULL, 'IS NULL');
  $db_or->condition('r.endpoints_entity_type', 'node', '!=');
  $query->condition($db_or);

  // Get the news those search type is not 'official news'
  $query->join('node__field_search_type', 'fst',
    'nfd.nid=fst.entity_id AND nfd.type=fst.bundle');
  $query->condition('fst.field_search_type_target_id',
    WECHAT_OFFICIAL_TID, '!=');

  $result = $query->execute()->fetchAll();
  return $result;
}

function _capital_news_get_google_news($date_flag) {
  $summary = $company_summary = [
    'count' => 0,
    'all_result' => 0,
    'new_result' => 0,
  ];
  // Company News
  $nodes = getNodesByType('company');
  foreach( $nodes as $node){
    getGoogleNews($date_flag, true, $company_summary, $node->getTitle(), $node->id(), $node->get('field_short_name')->value);
    // For news from clue origin, never sort by date
    getGoogleNews(false, false, $company_summary, $node->getTitle(), $node->id(), $node->get('field_short_name')->value);
  }
  // Core staff news
  $nodes = getNodesByType('staff');
  foreach( $nodes as $node){
    $company = Node::load($node->get('field_company')->target_id);
    if($company && $node->get('field_staff_type')->target_id == 10){
      $key = $node->getTitle() . ' ' . $company->get('field_search_keyword')->value;
      getGoogleNews($date_flag, true, $company_summary, $key, $node->id());
      getGoogleNews(false, false, $company_summary, $key, $node->id());
    }
  }
  // Other Google Key words
  $keywords_terms = _capital_news_getTermsByVocabularies(['additional_orgs','hot_spots','oversee_spots','general_key_words']);
  foreach( $keywords_terms as $term){
    getGoogleNews($date_flag, true, $summary, $term->name);
    getGoogleNews(false, false, $summary, $term->name);
  }
  _capital_news_search_summary($summary, 'page_1');
  _capital_news_search_summary($company_summary, 'page_6');
}
function _capital_news_get_wechat_news() {
  $news_summary = $company_news_summary = $account_summary = $company_account_summary = [
    'count' => 0,
    'all_result' => 0,
    'new_result' => 0,
  ];
  // Company News
  $nodes = getNodesByType('company');
  foreach( $nodes as $node){
    if($node->get('field_wechat')->value != null){
      getWechatOfficalNews($company_account_summary, $node->get('field_wechat')->value, $node->id(), $node->getTitle());
    }
    getWechatSearchNews($company_news_summary, $node->getTitle(), $node->id());
    getWechatSearchNews($company_news_summary, $node->get('field_short_name')->value, $node->id());
  }
  // Core staff news
  $nodes = getNodesByType('staff');
  foreach( $nodes as $node){
    $company = Node::load($node->get('field_company')->target_id);
    if($company && $node->get('field_staff_type')->target_id == 10){
      $key = $node->getTitle() . ' ' . $company->get('field_search_keyword')->value;
      getWechatSearchNews($company_news_summary, $key, $node->id());
    }
  }
  // Other wechat accounts
  $account_terms = _capital_news_getTermsByVocabularies(['wechat_accounts']);
  foreach( $account_terms as $account_term){
    $term = Term::load($account_term->tid);
    getWechatOfficalNews($account_summary, $term->get('field_wechat_account')->value, null, $account_term->name);
  }
  // Other Wechat Key words
  $keywords_terms = _capital_news_getTermsByVocabularies(['wechat_keywords']);
  foreach( $keywords_terms as $term){
    getWechatSearchNews($news_summary, $term->name);
  }
  _capital_news_search_summary($account_summary, 'page_2');
  _capital_news_search_summary($news_summary, 'page_3');
  _capital_news_search_summary($company_account_summary, 'page_5');
  _capital_news_search_summary($company_news_summary, 'page_7');
}
function getNodesByType($type){
  $query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', $type);
  $nids = $query->execute();
  return \Drupal::entityManager()->getStorage('node')->loadMultiple(array_values($nids));
}
function getGoogleNews($date_flag, $from_trusted, &$summary, $key, $nid = null, $or_key = null){
  $json = capital_common_get_rest_custom_search($key, $or_key, $date_flag? 'date': null, $from_trusted);
  $summary['count'] ++;
  if(isset($json->items)){
    $current_time = time();
    foreach($json->items as $result){
      $approximate_timestamp = $current_time; 
      preg_match('/^(\d+) (hours|hour|day|minutes) ago (.+)/s', $result->htmlSnippet, $matches);
      if ($date_flag){
        if (count($matches) != 4){
          \Drupal::logger('capital-rest')->warning('Date format unexpected, ' . print_r($result->htmlSnippet, true));
        } else{
          $approximate_timestamp = $current_time - (($matches[2] == 'hours' || $matches[2] == 'hour')? 3600 * $matches[1] : ($matches[2] == 'minutes'? 60 * $matches[1]: 86400));
        }
      }
      $approximate_timestamp = str_replace('+00:00', '', date_format(date_timestamp_set(new DateTime("now", new DateTimeZone('Etc/GMT+0')), $approximate_timestamp), 'c'));
      $origin_tid = _capital_news_getTidByLinkAndVocabulary($result->displayLink);
      $description = str_replace('<br>', '', isset($matches[3])? $matches[3] : $result->htmlSnippet);
      $is_new = _capital_news_createNews($key, $result->htmlTitle, $description, $result->link, $approximate_timestamp, $origin_tid, GOOGLE_SEARCH_TID, $nid);
      if($is_new){
        $summary['new_result']++;
      }
    }
    $summary['all_result'] += count($json->items);
  } elseif(isset($json->queries->request->totalResults) && $json->queries->request->totalResults != 0){
    \Drupal::logger('capital-rest')->error('Unexpected returned structure, ' . print_r($json, true));
  }
}
function getWechatSearchNews(&$summary, $key, $nid = null){
  $json = capital_common_get_wechat_search($key);
  $summary['count'] ++;
  foreach($json as $result){
    //$time = (new DateTime($result->date, new DateTimeZone('Asia/Shanghai')))->setTimezone(new DateTimeZone('Etc/GMT+0'))->format("Y-m-d\TH:i:s");
    $time = (new DateTime($result->date, new DateTimeZone('Etc/GMT+0')))->setTimezone(new DateTimeZone('Etc/GMT+0'))->format("Y-m-d\TH:i:s");
    $description = preg_replace('/<.?p( |=|"|\w)*>/', '', $result->digest);
    $description = str_replace(['<em>', '</em>'], ['<strong>', '</strong>'], $description);
    $is_new = _capital_news_createNews($key, $result->title, $description, $result->url, $time, null, WECHAT_SEARCH_TID, $nid);
    if($is_new){
      $summary['new_result']++;
    }
  }
  $summary['all_result'] += count($json);
}

function getWechatOfficalNews(&$summary, $key, $nid = null, $display_name, $tid = null){
  $json = capital_common_get_wechat_official_search($key);
  $summary['count'] ++;
  foreach($json as $result){
    //$time = (new DateTime($result->date, new DateTimeZone('Asia/Shanghai')))->setTimezone(new DateTimeZone('Etc/GMT+0'))->format("Y-m-d\TH:i:s");
    $time = (new DateTime($result->date, new DateTimeZone('Etc/GMT+0')))->setTimezone(new DateTimeZone('Etc/GMT+0'))->format("Y-m-d\TH:i:s");
    $is_new = _capital_news_createNews($display_name, $result->title, $result->digest, $result->url, $time, $tid, WECHAT_OFFICIAL_TID, $nid, true);
    if($is_new){
      $summary['new_result']++;
    }
  }
  $summary['all_result'] += count($json);
}

function _capital_news_getTermsByVocabularies($vids){
  $terms = array();
  foreach ( $vids as $vid){
    $terms = array_merge($terms, \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid));
  }
  return $terms;
}
function _capital_news_getTidByNameAndVocabulary($name, $vid){
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
  foreach($terms as $term){
    if($term->name == $name){
      return $term->tid;
    }
  }
}
function _capital_news_getTidByLinkAndVocabulary($domain_link){
  $db = \Drupal::database();
  $result = $db->select('taxonomy_term__field_domain_link','l')->fields('l', ['entity_id'])->condition('bundle', ['reliable_news_origins', 'other_news_origins'], 'IN')->condition('field_domain_link_value', $domain_link)->execute()->fetchAll();
  if(count($result) != 1){
    \Drupal::logger('capital-google-resource')->warning('Can not find origin for ' . print_r($domain_link, true));
    return 0;
  }
  return $result[0]->entity_id;
}
function _capital_news_createNews($key, $title, $description, $link, $timestamp, $origin_tid, $type_tid, $nid = null, $link_flag = false){
  // Create/update news
  $db = \Drupal::database();
  $result = $db->select('node__field_news_link','l')->fields('l', ['entity_id'])->condition('field_news_link_uri', $link)->execute()->fetchAll();
  if (count($result)  > 0 ){
    $news = Node::load($result[0]->entity_id);
    foreach($news->get('field_search_words')->getValue() as $search_word){
      if($search_word['value'] == $key){
        $find = true;
        break;
      }
    }
    if(!isset($find)){
      $news->field_search_words[] = ['value' => $key];
      $news->save();
    }
    if($nid && !in_array($nid, $news->get('field_related_nodes')->getValue())){
      $news->field_related_nodes[] = $nid;
      $news->save();
    }
  } else{
    $content = [
      'type' => 'news',
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
      'uid' => 1,
      'title' => $title,
      'field_title' =>[
        'value' => $title,
        'format' => 'full_html'
      ],
      'field_description' =>[
        'value' => $description,
        'format' => 'full_html'
      ],
      'field_news_link' =>[
        'uri' => $link,
      ],
      'field_news_origin' => [$origin_tid],
      'field_search_type' =>[ $type_tid],
      'field_related_nodes' =>[$nid],
      'field_search_words' =>[
        'value' => $key,
      ],
      'field_approximate_time' =>[
        'value' => $timestamp,
      ],
    ];

    if($link_flag){
      $content['field_content'] = [
        'value' => get_url_content($link),
          'format' => 'full_html'
        ];
    }
    $news = Node::create($content);
    $news->save();
    $is_new = true;
  }

  // Create relation if necessary
  if($link_flag && $nid){
    $link = new LinkNewsNodeLink($news->id(), $nid);
    $exist = $link->exists();
    if(count($exist) ==0){
      $link->create();
    }
  }
  return isset($is_new);
}
function capital_news_theme() {
  $items = [
    'news_element' => [
      'render element' => 'element',
    ],
  ];
  return $items;
}

// Process the html content
function save_news_content($nid) {
  $node = Node::load($nid);
  $news_link = $node->get('field_news_link')->getValue();
  $request_url = reset($news_link)['uri'];
  if (empty($request_url)) {
    \Drupal::logger('capital_news')->error(
      'Node @nid: The field news link is empty.',
      array('@nid' => $nid)
    );
    return;
  }

  $node->set('field_content',
    array('value'=>get_url_content($request_url), 'format'=>'full_html'));
  return $node->save();
}

function get_url_content($url) {
  // Get the html content of the url
  $html_content = file_get_contents($url);

  $dom = new \DOMDocument();
  // Avoid warnings for "Unexpected end tag"
  @$dom->loadHTML($html_content);

  _remove_script_elements($dom);

  // @todo: save the images to s3
  //_replace_image_src($dom);

  return $dom->saveHTML();
}

// Remove all the JavaScripts elements
function _remove_script_elements($dom) {
  $scripts = $dom->getElementsByTagName('script');
  $remove = array();
  foreach($scripts as $item) {
    $remove[] = $item;
  }
  foreach ($remove as $item) {
    $item->parentNode->removeChild($item);
  }
}

// Save all the images locally and replace the image links
function _replace_image_src($dom) {
  // Get all the img tags in the document
  $elements = $dom->getElementsByTagName('img');

  if($elements->length > 0) {
    foreach($elements as $element) {
      // Get the link of the image
      $src = $element->getAttribute('src');
      if (strlen($src) > 0) {
        $local_image = _save_image_to_local($src);
        $element->setAttribute('src', $local_image);
      }
    }
  }
}

// Process the image path and save the image file
// Return the image local path
function _save_image_to_local($image_url) {
  $content = file_get_contents($image_url);
  $basename = basename(parse_url($image_url, PHP_URL_PATH));

  $file = file_save_data($content, "public://news_images/$basename", FILE_EXISTS_REPLACE);
  $local_url = PublicStream::baseUrl() ."/news_images/$basename";
  return $local_url;
}
function createRelation($relation_type, $src_type, $src_id, $target_type, $target_id){
  $endpoints = [
    [
      'entity_type' => $src_type,
      'entity_id'   => $src_id,
      'r_index'     => 0,
    ],
    [
      'entity_type' => $target_type,
      'entity_id'   => $target_id,
      'r_index'     => 1,
    ],
  ];

  $relation = Relation::create(array('relation_type' => $relation_type));
  $relation->endpoints = $endpoints;
  $relation->save();
  \Drupal::logger('capital-relation')->notice('Create relation ' . print_r($relation_type, true));
}
function removeRelation($relation_ids){
  $storage_handler = \Drupal::entityTypeManager()->getStorage('relation');
  $relations = $storage_handler->loadMultiple($relation_ids);
  $storage_handler->delete($relations);
  \Drupal::logger('capital-relation')->notice('Delete relation ' . print_r($relation_ids, true));
}
function capital_news_preprocess_views_view(array &$variables) {
  if($variables['id'] == 'news_links'){
    $config = \Drupal::config('capital_news.settings');
    $summary = $config->get('search-results.' . $variables['display_id']);
    $variables['summary'] = '搜索时间:' . $summary['time'] . '   搜索次数:' . $summary['count'] . '   结果数目:' . $summary['all_result'] . '   新增结果(去重):' . $summary['new_result'];
  }
}
function _capital_news_search_summary($summary, $config_key) {
  $summary['time'] = date('m/d/Y H:i:s', time());
  \Drupal::logger('capital-summary')->info($config_key . print_r($summary, true));
  \Drupal::service('config.factory')->getEditable('capital_news.settings')->set('search-results.' . $config_key, $summary)->save();
}

function capital_news_sync_feeds(){
  // Find all the missing feeds
  $result = \Drupal::database()->query("SELECT f.fid as fid, t.name as name , t.tid as id, 0 AS is_node
    FROM taxonomy_term_field_data AS t
    LEFT JOIN feeds_feed AS f ON f.title = t.name and
    f.status =1
    WHERE t.vid
    IN (
      'general_key_words','additional_orgs','hot_spots','oversee_spots','general_key_words'
    )
    UNION
    SELECT f.fid as fid, w.word as name, w.nid as id,  1 AS is_node
    FROM feeds_feed AS f
    RIGHT JOIN (
      SELECT CONCAT_WS(  '', TRIM( n.title ) ,  ' ', TRIM( k.field_search_keyword_value ) ) AS word, n.nid AS nid
      FROM node_field_data AS n
      LEFT JOIN node__field_search_keyword AS k ON n.nid = k.entity_id
      WHERE n.type =  'company'
      UNION
      SELECT CONCAT_WS(  '', TRIM( n.title ) ,  ' ', TRIM( k.field_search_keyword_value ) ) AS word, n.nid AS nid
      FROM node_field_data AS n
      JOIN node__field_company AS c ON n.nid = c.entity_id
      LEFT JOIN node__field_search_keyword AS k ON c.field_company_target_id = k.entity_id
      WHERE n.type =  'staff'
    ) AS w ON f.title = w.word
    AND f.status =1
    ");
  $query = \Drupal::database()->select('feeds_feed', 'f');
  $query->fields('f', ['fid']);
  $query->condition('f.status', 1);
  $rids = $query->execute()->fetchAllAssoc('fid');
  $feeds = entity_load_multiple('feeds_feed');

  $actions = [];
  $new_feeds = [];
  $correct_feeds = [];
  $message = null;
  global $base_url;
  // Parse the search results
  foreach ($result as $row) {
    if ($row->fid == null){
      $new_feeds[$row->name] = $row->name;
      $feed = [
        'type' => 'google_alerts',
        'title'=> $row->name,
        'source'=> createAlerts($row->name),
        'status' =>1,
      ];
      if($row->is_node){
        $feed['field_related_nid'] = $row->id;
      }

      $feed = Feed::create($feed);
      $feed->save();
      $message .= 'Add alerts for ' . $row->name . ' ' . $base_url . '/feed/' . $feed->id() . '/edit <br>';
    } else {
      $correct_feeds[$row->fid] = $row->name;
    }
  }
  \Drupal::logger('capital-test')->debug(print_r(count($new_feeds), true));
  \Drupal::logger('capital-test')->debug(print_r(count($correct_feeds), true));
  \Drupal::logger('capital-test')->debug(print_r(count($correct_feeds + $new_feeds), true));
  $whole_list = $correct_feeds + $new_feeds;
  // @TODO Turn to use entity multiple load when available
  //$feeds = entity_load_multiple('feeds_feed', array_keys($rids));
  //$fids = array_keys($rids);
  foreach($feeds as $fid => $feed){
    if(array_key_exists($fid, $rids)){
      if( array_key_exists($fid, $correct_feeds)){
        // check correctness
        $url = $feed->getSource();
        if($url){
          $response = capital_common_get_rest_api($feed->getSource(), [], false);
          preg_match('/<title>Google Alert - (.*?)<\/title>/', $response, $matches);
          if(count($matches) < 2 || $matches[1] != $feed->label()){
            $message .= 'The RSS source does not match the search key ' . $feed->label() . ' at ' . $base_url . '/feed/' . $feed->id() . '/edit <br>';
            // Delete the old one and create new one
            deleteAlerts($row->name);
            $feed->setSource(createAlerts($row->name));
            $feed->save();
          }
        } else{
          $message .= 'Fill in the RSS source for  ' . $feed->label() . ' at ' . $base_url . '/feed/' . $feed->id() . '/edit <br>';
          // Create new one
          $feed->setSource(createAlerts($row->name));
          $feed->save();
        }
      }else{
        $feed->setActive(false);
        $feed->save();
        $message .= 'Delete alerts for ' . $feed->label() . '<br>';
        // Delete the this one 
        deleteAlerts($row->name);
      }
    }
  }
  \Drupal::logger('capital-mail')->debug(print_r($message, true));
  /*
  if(!$message == null){
    $message = 'Please take following actions:<br>' . $message;
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'capital_news';
    $key = 'google_alerts_action';
    $to = 'zishi8alerts@gmail.com';
    $params['message'] = $message;
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $send = true;
    $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
    if ($result['result'] !== true) {
      drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
    }
    else {
      drupal_set_message(t('Your message has been sent.'));
    }
  }
   */
  // Double check the alerts list 
  $alert_list = getAlertsList();
  $missing_list = array_diff($whole_list, $alert_list);
  \Drupal::logger('capital-mail')->debug(print_r($missing, true));
  foreach( $missing_list as $key){
    createAlerts($key);
  }
  $extra_list = array_diff($alert_list, $whole_list);
  \Drupal::logger('capital-mail')->debug(print_r($extra_list, true));
  foreach( $extra_list as $key){
    deleteAlerts($key);
  }
}

function getAlertsList(){
  $json = capital_common_get_google_alert_list();
  $list = [];
  foreach($json as $alert){
    $list[] = $alert->keyword;
  }
  return $list;
}
function createAlerts($key){
  $json = capital_common_create_google_alert($key);
  return "https://www.google.com" . $json->feedurl;
}
function deleteAlerts($key){
  $json = capital_common_delete_google_alert($key);
}
